import{_ as e,c as t,o as p,a3 as r}from"./chunks/framework.CqX4AtrM.js";const u=JSON.parse('{"title":"fs-extra","description":"","frontmatter":{},"headers":[],"relativePath":"node-perimeter/fs-extra.md","filePath":"node-perimeter/fs-extra.md","lastUpdated":1714383234000}'),i={name:"node-perimeter/fs-extra.md"},s=r('<h1 id="fs-extra" tabindex="-1">fs-extra <a class="header-anchor" href="#fs-extra" aria-label="Permalink to &quot;fs-extra&quot;">​</a></h1><p><strong>厌倦 mkdirp、rimraf 和 ncp 每次都出现在项目里</strong></p><p>创建目录、删除目录文件 和复制内容</p><ul><li><p>copy(src, dest[ , opts][ , cb])</p><p>src：复制目录内容，而非目录</p><p>dest：src 为文件时则该属性不能为目录</p><p>opts：</p><p>​ overwrite：是否覆盖，false 则静默方式失败</p><p>​ errorOnExist：true 时静默失败将抛错</p><p>​ dereference：取消引用符号</p><p>​ preserveTimestamps：true 时将设置原始源文件最后修改访问时间</p><p>​ filter：fn =&gt; PromiseLike&lt;bool&gt; 是否可复制</p></li><li><p>emptyDir(dir[ ,cb ])：创建、置空目录</p></li><li><p>ensureDir(dir, [ ,opts ][ , cb])：确保存在目录，没有则创建</p></li><li><p>ensureFile(file, [ ,cb ])：确保存在文件，路径不存在则创建目录</p></li><li><p>ensureLink(srcPath, destPath [ , cb ])：确保链接存在。不存在则创建。软<code>(保存地址)</code>硬<code>(指向对象)</code>链接</p></li><li><p>ensureSymlink(srcPath, destPath[ , type][ , cb])：确定符号链接存在。路径不存在则创建</p></li><li><p>read、write、writev(fd, buffer, offset, length, position)：文件、缓冲区、写入位置、读取长度、读取位置</p></li><li><p>move(src, dest [, opts ][ , cb])：src 和 dest 类型一致，opts.overwrite：是否覆盖</p></li><li><p>outputFile(file, data[ , opts ][ , cb ])：几乎同 writeFile。文件路径、数据</p></li><li><p>outputJson(file, obj[ , opts][, cb])：同 writeJson。路径不存在创建。支持 fs.writeFile 选项</p><p>spaces：要缩进的空个数。或缩进字符 \\t</p><p>EOL：默认 \\n</p><p>replacer：JSON replacer</p></li><li><p>pathExists(file [ , cb ])：判断路径是否存在</p></li><li><p>readJson(file [ , opts ][, cb])：读取并转换 JSON。支持 jsonFile.readFile opts</p></li><li><p>remove(path[ , cb])：删除目录、文件。不存在则静默</p></li><li><p>writeJson(file, obj[ , opts][, cb])：同 outputJson</p></li></ul>',4),o=[s];function l(a,c,n,d,f,_){return p(),t("div",null,o)}const b=e(i,[["render",l]]);export{u as __pageData,b as default};
