import{_ as s,c as n,o as a,a3 as p}from"./chunks/framework.Dy0uLohy.js";const h=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"knowledge-points/blindness.md","filePath":"knowledge-points/blindness.md","lastUpdated":1714443194000}'),e={name:"knowledge-points/blindness.md"},l=p(`<div class="language-txt vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">txt</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>双向绑定原理</span></span>
<span class="line"><span>代理 set / get 方法 - render 时收集依赖 - Watcher 实例化时往属性 dep 里放入自身，变化时触发并 notice</span></span>
<span class="line"><span></span></span>
<span class="line"><span>字符串处理</span></span>
<span class="line"><span>padStart / padEnd：指定最大长度并填充字符串</span></span>
<span class="line"><span></span></span>
<span class="line"><span>闭包</span></span>
<span class="line"><span>创建私有变量，延长声明周期。获取只有   返回变量、返回访问函数</span></span>
<span class="line"><span></span></span>
<span class="line"><span>权限管理</span></span>
<span class="line"><span>token - 通过识别用户对应的角色拿到过滤后的 菜单、权限标识，动态添加路由</span></span>
<span class="line"><span></span></span>
<span class="line"><span>css 水平垂直居中的方法</span></span>
<span class="line"><span>绝对定位 + top / left 50% + transform translate(-50%, -50%)</span></span>
<span class="line"><span>绝对定位 + top / left 50% + margin-top/left：盒子一半宽高</span></span>
<span class="line"><span>绝对定位 + 上下左右0 + margin：auto</span></span>
<span class="line"><span>flex + align / justify：center</span></span>
<span class="line"><span>grid + align / justify：center</span></span>
<span class="line"><span></span></span>
<span class="line"><span>options 预请求，非主动。是否允许该跨域请求。支持哪些请求方式</span></span>
<span class="line"><span>非简单请求。get / post / application / x-www-form-urlencoded / form-data 以外</span></span>
<span class="line"><span></span></span>
<span class="line"><span>max-age 和 expires</span></span>
<span class="line"><span>支持 max-age 则忽略 expires，IE 只支持 expires</span></span>
<span class="line"><span></span></span>
<span class="line"><span>强缓存：Cache-Control  比 Expires 优先级高，有效期直接走缓存</span></span>
<span class="line"><span>协商缓存：Etag / If-None-Match、Last-Modified / If-Modified-Since 请求后内容不变，返回 304 走浏览器缓存</span></span>
<span class="line"><span></span></span>
<span class="line"><span>this</span></span>
<span class="line"><span>	window</span></span>
<span class="line"><span>	指向被调用的对象</span></span>
<span class="line"><span>	显示改变</span></span>
<span class="line"><span>	new 时指向当前实例</span></span>
<span class="line"><span>	箭头函数定义时的 this</span></span>
<span class="line"><span></span></span>
<span class="line"><span>箭头函数：没有自己的 this，不能改变、没有 arguments、没有 prototype、不能 new</span></span>
<span class="line"><span></span></span>
<span class="line"><span>输入 URL 到页面加载显示完成：</span></span>
<span class="line"><span></span></span>
<span class="line"><span>	1. IP 地址查询：浏览器缓存 -&gt; 系统缓存 -&gt; 路由缓存 -&gt; DNS 缓存 -&gt; 域名服务器</span></span>
<span class="line"><span> 	2. 浏览器的三次握手，建立连接</span></span>
<span class="line"><span> 	3. 请求并处理，返回一个 HTTP 响应</span></span>
<span class="line"><span> 	4. 构建DOM 树，并解析其中的引用资源，发起请求</span></span>
<span class="line"><span> 	5. 显示完成，发送异步请求</span></span>
<span class="line"><span></span></span>
<span class="line"><span>脚本加载：</span></span>
<span class="line"><span>async：异步并立即执行。无序</span></span>
<span class="line"><span>defer：异步解析完后执行。按序</span></span>
<span class="line"><span></span></span>
<span class="line"><span>找下标：indexOf(val) | lastIndexOf(val)</span></span>
<span class="line"><span>插入某个位置：splice(i, 0, val)</span></span>
<span class="line"><span>模板字符串插入多个变量时：\\\`\${[ val1, val2, val3 ]}\`</span></span></code></pre></div>`,1),i=[l];function t(c,o,d,r,_,g){return a(),n("div",null,i)}const m=s(e,[["render",t]]);export{h as __pageData,m as default};
