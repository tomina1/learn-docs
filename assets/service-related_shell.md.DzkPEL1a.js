import{_ as s,c as i,o as a,a3 as h}from"./chunks/framework.Dy0uLohy.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"service-related/shell.md","filePath":"service-related/shell.md","lastUpdated":1717662822000}'),n={name:"service-related/shell.md"},l=h(`<p>编译器：<code>/usr/bin/sh</code>、<code>/bin/sh</code>、<code>/bin/bash</code>(#!用来指定编译器)</p><p>执行脚本</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">chmod</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> +x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> ./test.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #使脚本具有执行权限</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">./test.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #执行脚本</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">/bin/sh</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> test.sh</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #直接指定并执行</span></span></code></pre></div><p>传参、占位符：./test.sh 1 2 3 -- $1 $2 $3 其他特殊参数：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$#</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">参数个数</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">$\\*:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 所有参数字符串</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$$</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: ID</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$!:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 最后进程ID</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">$@</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 类似 $ 但以 </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$1</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$2</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">...输出数组</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 显示shell使用的当前选项</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$?</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: 显示最后命令的退出状态，0表示无错</span></span></code></pre></div><p>数组： 定义 arr = [1 2 3]、赋值 arr[0] = 1、取值 \${arr[0]} bash 支持关联数据(类似枚举)： 定义 declare -A arr = ([&quot;google&quot;] = &quot;www.google.com&quot; ...)、赋值取值类似 获取所有及其长度 所有元素 arr[ <code>*</code> | <code>@</code> ]、长度 !arr[ <code>*</code> | <code>@</code> ]</p><p>运算符：</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">关系运算:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -eq</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (==)、-ne (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=)、-gt (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)、-lt (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)、-ge (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=)、-le (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">布尔运算:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> !</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">非</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )、-o ( </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )、-a ( &amp; )</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">逻辑运算:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &amp;&amp;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">、</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">||</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">字符串运算:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> =、!=、-z</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (长度0)、-n (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">长度非0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)、$ (</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">为空</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">文件测试运算符:</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">d</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">文件、目录</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -(r</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">w</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)读写 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -s</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 空</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -x</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 可执行</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> -e</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 存在</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">  file</span></span></code></pre></div><p>test：检查运算符是否成立、$[ 基本运算 ]，常用于 if</p><p>echo 命令：-c 开启转义 <code>$var \\n\\c 换不换行</code>：变量、转义 \`date\`：显示当前日期</p><p>printf：类似 C，超出的重用打印</p><p>流程控制：If、For、While、Until、Case</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">if</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> test</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> bool</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> |</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [bool] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (()); </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">then</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> elif</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [bool] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">else</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> fi</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #if条件语句，(())作为判断可以使用 &gt;&lt; 符号</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cmd1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">cmd2...</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> done</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">w</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">hile((</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> let</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;i++&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> done</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # let 为 bash 命令，执行 n 个表达式不用 $</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">until(( bool )) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">do</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> done</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 为 true 时结束</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">case</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#DBEDFF;">	1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> cmd</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">	...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	;;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 跳出循环 break 和 continue</span></span></code></pre></div><p>函数</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(){} </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#定义，return 只能返回 0-255，其他则走 echo 输出</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">fn</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 2</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 4</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> #传参，第 9 个以上的参数 只能 \${10} 取参</span></span></code></pre></div><p>输入 / 输出：0 输入，1 输出，2 错误，运行时会生产这三个文件流</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[n] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;|&gt;&gt;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 输出 | 追加 到文件内</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[n] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;|&lt;&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> #</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> 输入</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 到文件内</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&gt;&amp;|&lt;&amp; # 将 输出、输入 文件合并</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&lt;&lt; tag # 将 开始 tab 和结束 tag 之间的内作为输入</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cmd1 &lt; infile &gt; outfile：指定 输入、输出内容 的文件</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cmd &lt;&lt; delimiter</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">	document</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">delimiter # 之间的内容传递给 cmd</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cmd &gt; /dev/null 2&gt;&amp;1 # 禁止输出，实则丢入类似 null 文件丢弃，无法读取</span></span></code></pre></div><p>文件引入：. ./xx.sh(两个点中间包含一个空格)</p><details class="details custom-block"><summary>异步的动态配置</summary> 这是内容......... </details>`,19),t=[l];function k(p,e,d,r,F,g){return a(),i("div",null,t)}const c=s(n,[["render",k]]);export{y as __pageData,c as default};
